/*
 * Copyright Michael D. Vinci
 * michaeldvinci | coned_miro
 */
package jquelle;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDropEvent;
import java.io.File;
import java.io.IOException;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

/**
 *
 * @author michaeldvinci
 */
public class Main extends javax.swing.JFrame {

    static JTextField addressField;
    static public String path;
    RepoManager repoMan1;
    Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
    String dndPath;
    
    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        
        File f = new File("C:\\Windows\\System32\\bash.exe");
        File g = new File("C:\\Windows\\SysWOW64\\bash.exe");
        if((f.exists() && !f.isDirectory()) || (g.exists() && !g.isDirectory())) { 
            // do something
        } else {
            JOptionPane.showMessageDialog(null, "JQuelle requires Bash for Windows. Please Install and restart!");
            System.exit(0);
        }
        
        repoMan1 = new RepoManager();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        createPackage = new javax.swing.JButton();
        manageRepo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        createPackage.setText("Create Package");
        createPackage.setActionCommand("openFolder");
        createPackage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createPackageActionPerformed(evt);
            }
        });

        manageRepo.setText("Manage Repo");
        manageRepo.setActionCommand("openFolder");
        manageRepo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageRepoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(createPackage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(manageRepo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addComponent(createPackage, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(manageRepo, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void createPackageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createPackageActionPerformed
        //selectFolder.setVisible(true);
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int result = chooser.showOpenDialog(null);
        switch (result) {
        case JFileChooser.APPROVE_OPTION:
            System.out.println("Approve (Open or Save) was clicked");
            path = chooser.getSelectedFile().getAbsolutePath();
            if (checkControl(path) == true) {
                System.out.println("Windows Path: " + path);
                path = path.replaceAll(":","");
                path = path.replace("\\", "/");
                path = "/mnt/c/" + path.substring(2,path.length());
                //selectF.setVisible(false);
                System.out.println("Bash Path: " + path);
                System.out.println("");
                String path2 = path;
                try {
                    PackageCreation.createPackage(path2);
                } catch (InterruptedException | IOException | NullPointerException ex) {
                    System.out.println(ex);
                }
                break;
            } else if (checkControl(path) == false) {
                JOptionPane.showMessageDialog(null, "Directory does not contain the required \\DEBIAN\\control file! Please choose again.");
                break;
            }
        case JFileChooser.CANCEL_OPTION:
            break;
        case JFileChooser.ERROR_OPTION:
            System.out.println("Error");
            break;
        }
    }//GEN-LAST:event_createPackageActionPerformed

    private void manageRepoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageRepoActionPerformed
        //repoMan1.setDefaultCloseOperation(RepoManager.DISPOSE_ON_CLOSE);
        //repoMan1.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        //repoMan1.setVisible(true);
        loadDND();
        
        
        
    }//GEN-LAST:event_manageRepoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Main().setVisible(true);
        });
    }
    
    public boolean checkControl(String path) {
        boolean fileThere = false;
        
        File h = new File(path + "\\DEBIAN\\control");
        fileThere = h.exists() && !h.isDirectory();
        return fileThere;
    }
    
    public String loadDND() {
        final JTextArea myPanel = new JTextArea();

        myPanel.setDropTarget(new DropTarget() {
            @Override
            public synchronized void drop(DropTargetDropEvent evt) {
                try {
                    evt.acceptDrop(DnDConstants.ACTION_COPY);
                    List<File> droppedFiles = (List<File>) evt
                            .getTransferable().getTransferData(
                                    DataFlavor.javaFileListFlavor);
                    droppedFiles.forEach((file) -> {
                        /*
                        * NOTE:
                        *  When I change this to a println,
                        *  it prints the correct path
                        */
                        dndPath = file.getAbsolutePath();
                        myPanel.setText(dndPath);
                    });
                } catch (UnsupportedFlavorException | IOException ex) {
                }
            }
        });

        myPanel.setText("Drop Icon Here");
        
        JFrame frame = new JFrame();
        
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int height = 200;
        int width = 200;
        frame.setSize(width, height);
        frame.add(myPanel);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        
        return dndPath;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createPackage;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JButton manageRepo;
    // End of variables declaration//GEN-END:variables
}
